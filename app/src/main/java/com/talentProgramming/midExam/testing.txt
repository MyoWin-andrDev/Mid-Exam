import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity

class DatabaseHelper(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {

    override fun onCreate(db: SQLiteDatabase) {
        db.execSQL("CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT NOT NULL UNIQUE, password TEXT NOT NULL)")
        db.execSQL("CREATE TABLE upload_status (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, status TEXT NOT NULL, uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE)")
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        db.execSQL("DROP TABLE IF EXISTS upload_status")
        db.execSQL("DROP TABLE IF EXISTS users")
        onCreate(db)
    }

    fun insertUser(username: String, password: String): Long {
        val db = writableDatabase
        val values = ContentValues()
        values.put("username", username)
        values.put("password", password)
        return db.insert("users", null, values)
    }

    fun insertUploadStatus(userId: Long, status: String): Long {
        val db = writableDatabase
        val values = ContentValues()
        values.put("user_id", userId)
        values.put("status", status)
        return db.insert("upload_status", null, values)
    }

    fun getUserUploadStatus(username: String): List<String> {
        val db = readableDatabase
        val query = "SELECT us.status, us.uploaded_at FROM upload_status us JOIN users u ON us.user_id = u.id WHERE u.username = ?"
        val cursor = db.rawQuery(query, arrayOf(username))
        val results = mutableListOf<String>()
        while (cursor.moveToNext()) {
            val status = cursor.getString(0)
            val uploadedAt = cursor.getString(1)
            results.add("Status: $status, Uploaded At: $uploadedAt")
        }
        cursor.close()
        return results
    }

    companion object {
        private const val DATABASE_NAME = "user_uploads.db"
        private const val DATABASE_VERSION = 1
    }
}

class MainActivity : AppCompatActivity() {
    private lateinit var dbHelper: DatabaseHelper

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        dbHelper = DatabaseHelper(this)

        // Insert User
        val userId = dbHelper.insertUser("john_doe", "securepassword")
        Log.d("DB", "Inserted User ID: $userId")

        // Insert Upload Status
        if (userId != -1L) {
            val uploadId = dbHelper.insertUploadStatus(userId, "Uploaded Successfully")
            Log.d("DB", "Inserted Upload ID: $uploadId")
        }

        // Retrieve Upload Status
        val statuses = dbHelper.getUserUploadStatus("john_doe")
        statuses.forEach { Log.d("DB", it) }
    }
}
